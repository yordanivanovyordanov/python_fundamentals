# JOSEPHUS PERMUTATION
# This problem takes its name by arguably the most important event in the life of the ancient historian
# Josephus: according to his tale, he and his 40 soldiers were trapped in a cave by the Romans during a siege.
# Refusing to surrender to the enemy, they instead opted for mass suicide, with a twist:
# they formed a circle and proceeded to kill one man every three, until one last man was left
# (and that it was supposed to kill himself to end the act). Well, Josephus and another man were
# the last two and, as we now know every detail of the story, you may have correctly guessed that
# they didn't exactly follow through the original idea.
# You are now to create a program that prints a Josephus permutation,
# receiving two lines of code (the list itself (string with elements separated by a single space)
# and a number k) as if they were in a circle and counted out every k places until none remained.

# SOLUTION
# Read the number of soldiers, and the step, from the console.

soldiers = input().split(' ')
kill_step = int(input())

# Create a result list, counter, and index count.

result = []
counter = 0
index = 0

# Loop through the list while there are soldiers left.
# Check if the counter modulo divided by 3 equals 0, and if it does add it to the result list.

while len(soldiers) > 0:
    counter += 1

    if counter % kill_step == 0:
        result.append(soldiers.pop(index))
    else:
        index += 1

    if index >= len(soldiers):
        index = 0

# Print out the result.

print(str(result).replace(' ', '').replace('\'', ''))
